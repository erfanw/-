	//电脑时钟c语言代码
//光电1603 吴尔凡 U201613797
//2018.11.15 final version



#include "C8051F020.h"

//////////////////////////////////////////////////////////////////////////////
////                          初始化程序                                  ////
//////////////////////////////////////////////////////////////////////////////
void Oscillator_Init()           //外部晶振设置
{
    int i = 0;
    OSCXCN    = 0x67;
    for (i = 0; i < 3000; i++);  // Wait 1ms for initialization
    while ((OSCXCN & 0x80) == 0);
    OSCICN    = 0x08;
}

void Timer_Init()                //定时器设置
{
    TMR3CN    = 0x04;            //定时器3工作
    TMR3RLH   = 0x90;            //定时器3初值
    TMR3H     = 0x90;            //定时器3装填值
    EIE2      = 0x0a1;            //允许定时器3开中断
    IE        = 0x82;            //允许定时器0开中断
    IP        = 0x02;            //定时器0高中断优先级
}



void Init_Device(void)
{
    Oscillator_Init();
    Timer_Init();
}

#define uchar unsigned char      //宏定义
#define uint unsigned int


sbit P3_0 = P3 ^ 0;               //位变量定义
sbit P3_1 = P3 ^ 1;
sbit P3_2 = P3 ^ 2;
sbit P3_5 = P3 ^ 5;
sbit P3_6 = P3 ^ 6;               
sbit P3_7 = P3 ^ 7;

//////////////////////////////////////////////////////////////////////////////
////                          全局变量声明                                ////
//////////////////////////////////////////////////////////////////////////////



uchar flag = 1;                      //键盘标志位
uchar state[11];                     //标志位合集
uchar keyst = 1;                     //按键显示标志位
uchar suichi[2] = {1, 1};            //整点报时、闹钟标志位
uchar num[17] = {0xfc, 0x60, 0xda, 0xf2, 0x66, 0xb6, 0xbe, 0xe0,
                 0xfe, 0xf6, 0xee, 0x3e, 0x9c, 0x7a, 0x9e, 0x8e }; 
          //显示管字模


uchar alarm[3][2];                   //闹钟设置变量
uchar sec = 58;                      //秒变量
uchar min = 59;                      //分变量
uchar hour = 23;                     //时变量
uint toki = 0;                       //定时器计数变量
uchar wkday;                         //周变量
uchar day = 4;                       //日变量
uchar month = 1;                     //月变量
uint year = 2100;                    //年变量
uchar m;                             //键值标志位


//////////////////////////////////////////////////////////////////////////////
////                           函数声明                                   ////
//////////////////////////////////////////////////////////////////////////////
void delay(uint k);              //delay函数
void time();                     //计时函数
void week();                     //星期的函数
void ymd();                      //年月日控制函数
void display1();                 //时间显示函数
void display2();                 //星期显示函数
void display3();                 //年月日显示函数
void display4(uchar k);          //闹钟设置显示函数
void alarm1();                   //闹钟控制函数
void oclock();                   //整点报时函数
void _74HC164(uchar dat);        //移位寄存器控制函数
uchar keyscan();                 //键盘扫描函数
void setmod();                   //功能设置函数
void setsequence();              //设置选择函数
void sethms();                   //时分秒设置函数
void setymd();                   //年月日设置函数
void correctymd();               //设置年月日进位校正函数
void selectalarm();              //闹钟选择函数
void stalm1();                   //闹钟1--闹钟3函数
void stalm2();
void stalm3();


///////////////////////////////////////////////////////////////////////////////
////                        显示/设置选择程序                              ////
///////////////////////////////////////////////////////////////////////////////
void select()
{
    switch(state[0])
    {
    case(0):                     //显示模式
    {
        if(m == 17)              //若F6键按下，切换至设置模式
        {
            m = 20;
            state[0] = 1;
            WDTCN=0xa5;          //喂狗
        }
        setmod();                //显示模式
        switch(state[5])         //选择是否开整点报时
        {
        case(0):                 //开整点报时
            if(m == 11)          //按"="键关闭整点报时
            {
                m = 20;          //键值标志变量回初态
                state[5] = 1;    //跳转至下一态
            }
            suichi[0] = 1;       //整点报时开
            break;

        case(1):                 //关整点报时
            if(m == 11)          //按"="键开启整点报时
            {
                m = 20;
                state[5] = 0;
                WDTCN=0xa5;      //喂狗
            }
            suichi[0] = 0;       //整点报时关
            break;
        }
        break;
    }
    case(1):                     //时间设置模式
    {
        WDTCN=0xa5;              //喂狗
        setsequence();           //设置选择函数
        break;
    }

    case(2):                     //闹钟设置模式
        TR0 = 1;                 //定时器开
        WDTCN=0xa5;              //喂狗
        selectalarm();           //选择闹钟
        break;

    }
}

//////////////////////////////////////////////////////////////////////////////
////                        显示功能控制程序                              ////
//////////////////////////////////////////////////////////////////////////////
void setmod()
{
    switch(state[1])             //模式选择
    {
    case(0):                     //时分秒显示模式
    {
        if(m == 16)              //若按F5，切换至星期显示模式
        {
            WDTCN=0xa5;          //喂狗
            m = 20;              //键盘回初态
            state[1] = 1;        //标志位切至星期显示
        }
        TR0 = 1;                 //定时器开
        keyst = 1;               //按键显示时分秒模式
        display1();              //显示时分秒

        break;
    }

    case(1):                     //星期显示模式
    {
        if(m == 16)              //若按F5，切换至年月日显示模式
        {
            WDTCN=0xa5;          //喂狗
            m = 20;              //键盘回初态
            state[1] = 2;        //标志位切至年月日显示
        }
        keyst = 2;               //按键显示星期模式
        display2();              //显示星期
        break;
    }

    case(2):                     //年月日显示模式
    {
        if(m == 16)              //若按F5，切换至时分秒显示模式
        {
            WDTCN=0xa5;          //喂狗
            m = 20;              //键盘回初态
            state[1] = 0;        //标志位切至时分秒显示
        }
        keyst = 3;               //按键显示年月日模式
        display3();              //显示年月日
        break;
    }
    }
    return;
}

//////////////////////////////////////////////////////////////////////////////
////                         设置选择程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void setsequence()
{
    TR0 = 0;                     //关定时器0
    switch(state[2])
    {
    case(1):                     //设置时分秒
        WDTCN=0xa5;              //喂狗
        sethms();
        break;

    case(0):                     //设置年月日
        WDTCN=0xa5;              //喂狗
        setymd();
        break;
    }
}

//////////////////////////////////////////////////////////////////////////////
////                         时间设置程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void sethms()
{
    uchar mark = 1;              //循环标志位
    uchar key;                   //键值局域变量
    keyst = 1;                   //按键显示标志位
    while(mark)                  //跳出程序前一直循环等待按键
    {
        WDTCN=0xa5;              //喂狗
        display1();              //显示时分秒
        if(state[3] == 0)        //设置秒
        {
            key = keyscan();     //键盘扫描
            if(key == 0)         //如果按"0"，秒加一
            {
                sec++;
                if(sec == 60) sec = 0;          //秒为59时再加一则回0
            }
            if(key == 10) state[3] = 1;         //若按"."，则设置分
            if(key == 17)
            {
                state[2] = 0;    //若按"F6"，跳转至闹钟设置
                state[0] = 2;
            }
            mark = 0;            //标志位回0跳出循环
        }

        if(state[3] == 1)        //设置分
        {
            key = keyscan();     //键盘扫描
            if(key == 0)         //如果按"0"，分加一
            {
                min++;
                if(min == 60) min = 0;          //分为59时再加一则回0
            }
            if(key == 10) state[3] = 2;         //若按"."，则设置时
            if(key == 17)
            {
                state[2] = 0;    //若按"F6"，跳转至闹钟设置
                state[0] = 2;
            }
            mark = 0;            //标志位回0跳出循环
        }

        if(state[3] == 2)        //设置时
        {
            key = keyscan();     //键盘扫描
            if(key == 0)         //如果按"0"，时加一
            {
                hour++;
                if(hour == 24) hour = 0;        //时为23时再加一则回0
            }
            if(key == 10) state[3] = 0;         //若按"."，则设置秒
            if(key == 17)
            {
                state[2] = 0;    //若按"F6"，跳转至闹钟设置
                state[0] = 2;
            }
            mark = 0;            //标志位回0跳出循环
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
////                         年月日设置程序                               ////
//////////////////////////////////////////////////////////////////////////////
void setymd()
{
    uchar mark = 1;              //循环标志位
    uchar key;                   //键值局域变量
    keyst = 3;                   //按键显示标志位
    while(mark)                  //跳出程序前一直循环等待按键
    {
        WDTCN=0xa5;
        display3();              //显示年月日
        if(state[4] == 0)        //设置年
        {
            key = keyscan();             //键盘扫描
            if(key == 0) year++;         //若按"0"，则年加一
            if(key == 1) year--;         //若按"1"，则年减一
            if(key == 10) state[4] = 1;  //若按"."，则设置月
            if(key == 17) state[2] = 1;  //若按"F6"，跳转至时分秒设置
            mark = 0;                    //标志位回0跳出循环
        }

        if(state[4] == 1)        //设置月
        {
            key = keyscan();             //键盘扫描
            if(key == 0)  month++;       //若按"0"，则月加一
            if(month == 13) month = 1;   //若月为12，再加一则回1月
            if(key == 10) state[4] = 2;  //若按"."，则设置日
            if(key == 17) state[2] = 1;  //若按"F6"，跳转至时分秒设置
            mark = 0;                    //标志位回0跳出循环
        }

        if(state[4] == 2)        //设置日
        {
            key = keyscan();             //键盘扫描
            if(key == 0) correctymd();   //若按"0"，则日按规则进位
            if(key == 10) state[4] = 0;  //若按"."，则设置年
            if(key == 17) state[2] = 1;  //若按"F6"，跳转至时分秒设置
            mark = 0;                    //标志位回0跳出循环
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
////                     设置年月日的校正程序                             ////
//////////////////////////////////////////////////////////////////////////////
void correctymd()
{
    day++;                           //日加一
    WDTCN=0xa5;                      //喂狗
    if((month == 1) || (month == 3) || (month == 5) || (month == 7) || (month == 8) || (month == 10) || (month == 12))
    {                                //一三五七八十腊
        if(day == 32)                //三十一天永不差
        {
            day = 1;
        }
    }
    if((month == 4) || (month == 6) || (month == 9) || (month == 11))
    {                                //四、六、九、十一
        if(day == 31)                //三十天
        {
            day = 1;
        }
    }
    if(month == 2)                   //判断平年还是闰年
    {
        if((year % 100) != 0)        //判断年份是否为100的倍数
        {
            if((year % 4) == 0)      //不是100的倍数且是4的倍数，是闰年
            {
                if(day == 30)        //闰年二月二十九
                {
                    day = 1;
                }
            }
            if((year % 4) != 0)      //不是4的倍数，是平年
            {
                if(day == 29)        //平年二月二十八
                {
                    day = 1;
                }
            }
        }
        if((year % 100) == 0)        //年份是100的倍数
        {
            if((year % 400) == 0)    //是100的倍数且是400的倍数，是闰年
            {
                if(day == 30)        //闰年二月二十九
                {
                    day = 1;
                }
            }
            else                     //是100的倍数且不是400的倍数，是平年
            {
                if(day == 29)        //平年二月二十八
                {
                    day = 1;
                }
            }
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
////                         闹钟选择程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void selectalarm()
{
    state[10] = suichi[0];       //记忆整点报时状态
    suichi[0] = 0;               //设置闹钟时关闭整点报时
    suichi[1] = 0;               //关闭闹钟提示
    switch(state[6])
    {
    case(0):                     //设置闹钟1
        stalm1();
        WDTCN=0xa5;              //喂狗
        break;

    case(1):                     //设置闹钟2
        stalm2();                
        WDTCN=0xa5;              //喂狗
        break;

    case(2):                     //设置闹钟3
        stalm3();
        WDTCN=0xa5;              //喂狗
        break;
    }
}


//////////////////////////////////////////////////////////////////////////////
////                        闹钟1设置程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void stalm1()
{
    uchar mark = 1;              //循环标志位
    uchar key;                   //键值局域变量
    WDTCN=0xa5;                  //喂狗
    keyst = 4;                   //按键显示闹钟设置
    while(mark)
    {
        WDTCN=0xa5;
        display4(state[6]);      //显示闹钟设置界面

        if(state[7] == 0)        //闹钟分设置模式
        {
            key = keyscan();     //扫描键盘
            if(key == 0)         //若按0键
            {
                (alarm[0][0])++; //闹钟分++
                if(alarm[0][0] == 60) alarm[0][0] = 0;
            }                    //若分为59，再加一回0

            if(key == 10) state[7] = 1;       //若按. 键，设置闹钟时
            if(key == 17) state[6] = 1;       //若按F6键，设置下一个闹钟
            mark = 0;
        }

        if(state[7] == 1)        //闹钟时设置模式
        {
            key = keyscan();     //扫描键盘
            if(key == 0)         //若按0键
            {
                (alarm[0][1])++; //闹钟时++
                if(alarm[0][1] == 25) alarm[0][1] = 0;   
            }                    //闹钟时数为"24"时，关闹钟，显示A1 OFF，再加一回0
            if(key == 10) state[7] = 0;       //若按. 键，设置闹钟分
            if(key == 17) state[6] = 1;       //若按F6键，设置下一个闹钟
            mark = 0;            //跳出循环
        }

    }
}


//////////////////////////////////////////////////////////////////////////////
////                        闹钟2设置程序                                 ////
//////////////////////////////////////////////////////////////////////////////
/*闹钟2，3的代码与闹钟1基本一致，此处不再重复注释*/
void stalm2()
{
    uchar mark = 1;
    uchar key;
    WDTCN=0xa5;
    keyst = 4;
    while(mark)
    {
        WDTCN=0xa5;
        display4(state[6]);

        if(state[8] == 0)
        {
            key = keyscan();
            if(key == 0)
            {
                (alarm[1][0])++; 
                if(alarm[1][0] == 60) alarm[1][0] = 0;
            }

            if(key == 10) state[8] = 1;
            if(key == 17) state[6] = 2;
            mark = 0;
        }

        if(state[8] == 1)
        {
            key = keyscan();
            if(key == 0)
            {
                (alarm[1][1])++; 
                if(alarm[1][1] == 24) alarm[1][1] = 0;
            }
            if(key == 10) state[8] = 0;
            if(key == 17) state[6] = 2;
            mark = 0;
        }

    }
}


//////////////////////////////////////////////////////////////////////////////
////                        闹钟3设置程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void stalm3()
{
    uchar mark = 1;
    uchar key;
    WDTCN=0xa5;
    keyst = 4;
    while(mark)
    {
        WDTCN=0xa5;
        display4(state[6]);

        if(state[9] == 0)
        {
            key = keyscan();
            if(key == 0)
            {
                (alarm[2][0])++; 
                if(alarm[2][0] == 60) alarm[2][0] = 0;
            }

            if(key == 10) state[9] = 1;
            if(key == 17)        //若按F6，回到显示模式，闹钟开，整点报时回到初态
            {
                state[6] = 0;
                suichi[0] = state[10];
                suichi[1] = 1;
                state[0] = 0;
            }
            mark = 0;
        }

        if(state[9] == 1)
        {
            key = keyscan();
            if(key == 0)
            {
                (alarm[2][1])++; 
                if(alarm[2][1] == 24) alarm[2][1] = 0;
            }
            if(key == 10) state[9] = 0;
            if(key == 17)         //若按F6，回到显示模式，闹钟开，整点报时回到初态
            {
                state[6] = 0;
                suichi[0] = state[10];
                suichi[1] = 1;
                state[0] = 0;
            }
            mark = 0;
        }

    }
}

//////////////////////////////////////////////////////////////////////////////
////                           delay程序                                  ////
//////////////////////////////////////////////////////////////////////////////
void delay(uint k)
{
    uchar j;                     //循环变量
    WDTCN=0xa5;                  //喂狗
    while((k--) != 0)            //k=0时跳出循环
    {
        for(j = 0; j < 100; j++) {}       //空循环100次
    }                            //一共循环100*k次
}


//////////////////////////////////////////////////////////////////////////////
////                         74HC164程序                                  ////
//////////////////////////////////////////////////////////////////////////////
void _74HC164(uchar dat)         //向74HC164中一个8位data
{
    uchar i;
    WDTCN=0xa5;                  //喂狗
    for(i = 0; i < 8; i++)       //将8位data并行输出
    {
        P3_7 = 0;                //时钟翻转
        if(dat & 0x80)           //取出数据的第一位
            P3_6 = 1;            //是1则置1
        else
            P3_6 = 0;            //是0则置0
        P3_7 = 1;                //时钟翻转，产生上升沿信号
        dat = dat << 1;          //数据左移
    }
}


//////////////////////////////////////////////////////////////////////////////
////                         键盘扫描程序                                 ////
//////////////////////////////////////////////////////////////////////////////
uchar keyscan()
{
    uchar key_value;             //键值变量
    uchar i;                     //循环变量
    WDTCN=0xa5;                  //喂狗
    flag = 1;                    //按键标志位置1
    _74HC164(0x00);              //向74HC164送入0x00
    if((P4 | 0xf0) != 0xff)      //若有按键按下
    {
        delay(50);               //防抖
        if(!((P4 | 0xf0) == 0xff))      //判断是否确实有按键按下
        {
            for(i = 0; i < 5; i++)      //行扫描
            {
                switch(i)               
                {
                case(0):                //第一行
                {
                    _74HC164(0x1e);     //0001 1110
                    if ((P4 | 0xf0) == 0xfe)    //1111 1110
                    {                   
                        flag = 0;               //有键按下的标志
                        key_value = 0;          //0键按下
                    }
                    if ((P4 | 0xf0) == 0xfd)    //1111 1101
                    {
                        flag = 0;
                        key_value = 1;          //1键按下
                    }
                    if ((P4 | 0xf0) == 0xfb)    //1111 1011
                    {
                        flag = 0;
                        key_value = 2;          //2键按下
                    }
                    if ((P4 | 0xf0) == 0xf7)    //1111 0111
                    {
                        flag = 0;
                        key_value = 3;          //3键按下
                    }
                    break;
                }
                case(1):                        //第二行
                {
                    _74HC164(0x1d);             //0001 1101
                    if ((P4 | 0xf0) == 0xfe)    //1111 1110
                    {
                        flag = 0;
                        key_value = 4;          //4键按下
                    }
                    if ((P4 | 0xf0) == 0xfd)    //1111 1101
                    {
                        flag = 0;
                        key_value = 5;          //5键按下
                    }
                    if ((P4 | 0xf0) == 0xfb)    //1111 1011
                    {
                        flag = 0;
                        key_value = 6;          //6键按下
                    }
                    if ((P4 | 0xf0) == 0xf7)    //1111 0111
                    {
                        flag = 0;
                        key_value = 7;          //7键按下
                    }
                    break;

                }

                case(2):                        //扫描第三行
                {
                    _74HC164(0x1b);             //0001 1011
                    if ((P4 | 0xf0) == 0xfe)    //1111 1110
                    {
                        flag = 0;
                        key_value = 8;          //8键按下
                    }
                    if ((P4 | 0xf0) == 0xfd)    //1111 1101
                    {
                        flag = 0;
                        key_value = 9;          //9键按下
                    }
                    if ((P4 | 0xf0) == 0xfb)    //1111 1011
                    {
                        flag = 0;
                        key_value = 10;         //. 键按下
                    }
                    if ((P4 | 0xf0) == 0xf7)    //1111 0111
                    {
                        flag = 0;
                        key_value = 11;         //=键按下
                    }
                    break;
                }

                case(3):                        //扫描第四行
                {
                    _74HC164(0x17);             //0001 0111
                    if ((P4 | 0xf0) == 0xfe)    //1111 1110
                    {
                        flag = 0;
                        key_value = 12;         //F1键按下
                    }
                    if ((P4 | 0xf0) == 0xfd)    //1111 1101
                    {
                        flag = 0;
                        key_value = 13;         //F2键按下
                    }
                    if ((P4 | 0xf0) == 0xfb)    //1111 1011
                    {
                        flag = 0;
                        key_value = 14;         //F3键按下
                    }
                    if ((P4 | 0xf0) == 0xf7)    //1111 0111
                    {
                        flag = 0;
                        key_value = 15;         //F4键按下
                    }
                    break;
                }

                case(4):
                {
                    _74HC164(0x0f);             //0000 1111
                    if ((P4 | 0xf0) == 0xfe)    //1111 1110
                    {
                        flag = 0;
                        key_value = 16;         //F5键按下
                    }
                    if ((P4 | 0xf0) == 0xfd)    //1111 1101
                    {
                        flag = 0;
                        key_value = 17;         //F6键按下
                    }
                    if ((P4 | 0xf0) == 0xfb)    //1111 1011
                    {
                        flag = 0;
                        key_value = 18;         //F7键按下
                    }
                    if ((P4 | 0xf0) == 0xf7)    //1111 0111
                    {
                        flag = 0;
                        key_value = 19;         //F8键按下
                    }
                    break;
                }

                }
            }
        }
    }
    if(flag)  return 20;              //没按键，返回20

    else
        _74HC164(0x00);
    while (((P4 | 0xf0)) != 0xff)     //等待按键松开
    {
        switch(keyst)
        {
        case(1):                      //显示按键前的时分秒界面
            display1();
            break;
        case(2):                      //显示按键前的星期界面
            display2();               
            break;
        case(3):                      //显示按键前的年月日界面
            display3();
            break;
        case(4):                      //显示按键前的闹钟设置界面
            display4(state[6]);
            break;
        }
    }
    return key_value;                 //返回键值

}


//////////////////////////////////////////////////////////////////////////////
////                         时分秒控制程序                               ////
//////////////////////////////////////////////////////////////////////////////
void time()
{
    WDTCN=0xa5;                       //喂狗
    if(sec == 60)                     //若秒为60
    {
        sec = 0;                      //秒回0
        min++;                        //分加一
        if(min == 60)                 //若分为60
        {
            min = 0;                  //分回0
            hour++;                   //时加一
            if(hour == 24)            //若时为24
            {
                hour = 0;             //时回0
                ymd();                //日期进位
            }
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
////                         星期控制程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void week()
{
    uchar monz;                       //蔡勒公式下的"月"
    uchar decade = year % 100;        //取年的低二位
    uchar century = year / 100;       //取年的高二位
    WDTCN=0xa5;                       //喂狗
    if(month == 1)                    //若为1月
    {                                 
        monz = 13;                    //1月修正为前一年的"13月"
        if(decade == 0)               //若是xx00年
        {
            decade = 99;              
            century--;                //高二位减一
        }
        else decade--;                //若不是00年，低二位减一
    }            
    else if(month == 2)               //若为2月
    {
        monz = 14;                    //2月修正为前一年的"14月"
        if(decade == 0)               //若是xx00年
        {
            decade = 99;              //年的低二位变为99
            century--;                //高二位减一
        }
        else decade--;                //若不是00年，低二位减一
    }       
    else monz = month;                //3-12月正常
    wkday=(((decade+(decade/4)+(century/4)-2*century+13*(monz+1)/5)+day-1+70)%7);    //蔡勒公式计算今天是礼拜几
    if(wkday == 0) wkday = 7;         //蔡勒公式运算结果0作为周日
}


//////////////////////////////////////////////////////////////////////////////
////                        年月日控制程序                                ////
//////////////////////////////////////////////////////////////////////////////
void ymd()
{
    day++;                            //日加一
    WDTCN=0xa5;                       //喂狗
    if((month == 1) || (month == 3) || (month == 5) || (month == 7) || (month == 8) || (month == 10) || (month == 12))
    {                                 //一三五七八十腊
        if(day == 32)                 //三十一天永不差
        {
            day = 1;
            month++;
            if(month == 13)           //12月进位回1月
            {
                month = 1;
                year++;               //年加一
            }
        }
    }
    if((month == 4) || (month == 6) || (month == 9) || (month == 11))
    {                                 //四、六、九、十一
        if(day == 31)                 //三十天
        {
            day = 1;
            month++;
        }
    }
    if(month == 2)                    //判断平年还是闰年
    {
        if((year % 100) != 0)         //判断年份是否为100的倍数
        {
            if((year % 4) == 0)       //不是100的倍数且是4的倍数，是闰年
            {
                if(day == 30)         //闰年二月二十九
                {
                    day = 1;
                    month++;
                }
            }
            if((year % 4) != 0)       //不是4的倍数，是平年
            {
                if(day == 29)         //平年二月二十八
                {
                    day = 1;
                    month++;
                }
            }
        }
        if((year % 100) == 0)         //年份是100的倍数
        {
            if((year % 400) == 0)     //是100的倍数且是400的倍数，是闰年
            {
                if(day == 30)         //闰年二月二十九
                {
                    day = 1;
                    month++;
                }
            }
            else                      //是100的倍数且不是400的倍数，是平年
            {
                if(day == 29)         //平年二月二十八
                {
                    day = 1;
                    month++;
                }
            }
        }
    }

}

//////////////////////////////////////////////////////////////////////////////
////                        时分秒显示程序                                ////
//////////////////////////////////////////////////////////////////////////////
void display1()
{
    uchar c = 0;                      //循环变量
    WDTCN=0xa5;                       //喂狗
    P3_5 = 0;                         //蜂鸣器关
    for(; c < 7; c++)
    {
        switch(c)
        {
        case(0):                      //选中第一个数码管
        {
            P3_0 = 0;
            P3_1 = 0;
            P3_2 = 1;
            P2 = num[sec % 10];       //显示秒个位
            break;
        }

        case(1):                      //选中第二个数码管
        {
            P3_0 = 1;
            P3_1 = 0;
            P3_2 = 1;
            P2 = num[sec / 10];       //显示秒十位
            break;
        }

        case(2):                      //选中第三个数码管
        {
            P3_0 = 0;
            P3_1 = 1;
            P3_2 = 1;
            P2 = num[min % 10] + 0x01;   //显示分个位加.
            break;
        }

        case(3):                      //选中第四个数码管
        {
            P3_0 = 1;
            P3_1 = 1;
            P3_2 = 1;
            P2 = num[min / 10];       //显示分十位
            break;
        }

        case(4):                      //选中第五个数码管
        {
            P3_0 = 0;
            P3_1 = 0;
            P3_2 = 0;
            P2 = num[hour % 10] + 0x01;   //显示时个位加.
            break;
        }

        case(5):                      //选中第六个数码管
        {
            P3_0 = 1;
            P3_1 = 0;
            P3_2 = 0;
            P2 = num[hour / 10];      //显示时十位
            break;
        }

        case(6):                      //选中第八个数码管
            if(suichi[0] == 0)        //若整点报时关
            {
                P3_0 = 1;
                P3_1 = 1;
                P3_2 = 0;
                P2 = 0x01;            //显示. 示意整点报时关
                break;
            }
        }
        delay(1);                     //延时
        P2 = 0x00;                    //数码管消隐

    }
}


//////////////////////////////////////////////////////////////////////////////
////                         星期显示程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void display2()
{
    uchar c = 0;
    WDTCN=0xa5;                       //喂狗
    week();                           //Zeller公示计算今日周几
    for(; c < 5; c++)
    {
        switch(c)
        {
        case(0):                      //选中第一个数码管
        {
            P3_0 = 0;
            P3_1 = 0;
            P3_2 = 1;
            P2 = num[wkday];          //显示今日周几
            break;
        }

        case(1):                      //选中第五个数码管
        {
            P3_0 = 0;
            P3_1 = 0;
            P3_2 = 0;
            P2 = 0x7c;                //显示U
            break;
        }

        case(2):                      //选中第六个数码管
        {
            P3_0 = 1;
            P3_1 = 0;
            P3_2 = 0;
            P2 = num[0];              //显示O
            break;
        }

        case(3):                      //选中第七个数码管
        {
            P3_0 = 0;
            P3_1 = 1;
            P3_2 = 0;
            P2 = 0x6e;                //显示H
            break;
        }

        case(4):                      //选中第八个数码管
        {
            P3_0 = 1;
            P3_1 = 1;
            P3_2 = 0;
            P2 = 0xda;                //显示Z
            break;
        }
        }
        delay(1);                     //延时
        P2 = 0x00;                    //消隐
    }
}


//////////////////////////////////////////////////////////////////////////////
////                        年月日显示程序                                ////
//////////////////////////////////////////////////////////////////////////////
void display3()
{
    uchar c = 0;
    uchar yl = year % 100;            //年低二位
    uchar yh = year / 100;            //年高二位
    WDTCN=0xa5;                       //喂狗
    for(; c < 8; c++)
    {
        switch(c)
        {
        case(0):                      //显示日个位
        {
            P3_0 = 0;
            P3_1 = 0;
            P3_2 = 1;
            P2 = num[day % 10];
            break;
        }

        case(1):                      //显示日十位
        {
            P3_0 = 1;
            P3_1 = 0;
            P3_2 = 1;
            P2 = num[day / 10];
            break;
        }

        case(2):                      //显示月个位
        {
            P3_0 = 0;
            P3_1 = 1;
            P3_2 = 1;
            P2 = num[month % 10] + 0x01;
            break;
        }

        case(3):                      //显示月十位
        {
            P3_0 = 1;
            P3_1 = 1;
            P3_2 = 1;
            P2 = num[month / 10];
            break;
        }

        case(4):                      //显示年个位
        {
            P3_0 = 0;
            P3_1 = 0;
            P3_2 = 0;
            P2 = num[yl % 10] + 0x01;
            break;
        }

        case(5):                      //显示年十位
        {
            P3_0 = 1;
            P3_1 = 0;
            P3_2 = 0;
            P2 = num[yl / 10];
            break;
        }

        case(6):                      //显示年百位
        {
            P3_0 = 0;
            P3_1 = 1;
            P3_2 = 0;
            P2 = num[yh % 10];
            break;
        }

        case(7):                      //显示年千位
        {
            P3_0 = 1;
            P3_1 = 1;
            P3_2 = 0;
            P2 = num[yh / 10];
            break;
        }
        }
        delay(1);                     //延时
        P2 = 0x00;                    //消隐

    }
}


//////////////////////////////////////////////////////////////////////////////
////                       闹钟设置显示程序                               ////
//////////////////////////////////////////////////////////////////////////////
void display4(uchar k)
{
    uchar c = 0;
    WDTCN=0xa5;                       //喂狗
    for(; c < 8; c++)
    {
        switch(c)
        {
        case(0):                      //未关闹钟显示闹钟分个位
            if((alarm[k][1]) != 24)   //关闹钟时该位不显示
            {
                P3_0 = 0;
                P3_1 = 0;
                P3_2 = 1;
                P2 = num[alarm[k][0] % 10];
                break;
            }

        case(1):                      //未关闹钟显示闹钟分十位
        {
            P3_0 = 1;
            P3_1 = 0;
            P3_2 = 1;
            if((alarm[k][1]) != 24) P2 = num[alarm[k][0] / 10];     
            if((alarm[k][1]) == 24) P2 = num[15];     //关闹钟时该位显示F
            break;
        }

        case(2):
            P3_0 = 0;                 //未关闹钟显示闹钟时个位
            P3_1 = 1;
            P3_2 = 1;
            if((alarm[k][1]) != 24) P2 = num[alarm[k][1] % 10] + 0x01;   
            if((alarm[k][1]) == 24) P2 = num[15];      //关闹钟时该位显示F
            break;

        case(3):                      //未关闹钟显示闹钟时十位
            P3_0 = 1;
            P3_1 = 1;
            P3_2 = 1;
            if((alarm[k][1]) != 24) P2 = num[alarm[k][1] / 10];  
            if((alarm[k][1]) == 24) P2 = num[0];       //关闹钟时该位显示O
            break;


        case(4):                      //显示闹钟号
        {
            P3_0 = 0;
            P3_1 = 1;
            P3_2 = 0;
            P2 = num[k + 1];
            break;
        }

        case(5):                      //显示A（闹钟的意思）
        {
            P3_0 = 1;
            P3_1 = 1;
            P3_2 = 0;
            P2 = num[10];
            break;
        }
        }
        delay(1);                     //延时
        P2 = 0x00;                    //消隐

    }
}

//////////////////////////////////////////////////////////////////////////////
////                         整点报时程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void oclock()
{
    uchar i;                          //循环变量
    uint j;                           //延时显示循环变量
    WDTCN=0xa5;                       //喂狗
    if(min == 0 && sec == 0 && toki == 0 && suichi[0] == 1)
    {                                 //若到整点且开关打开
        for(i = 0; i < 4; i++)        //响四次
        {
            WDTCN=0xa5;               //喂狗
            P3_5 = 1;                 //蜂鸣器响
            P4 = P4 + 0x10;           //LED亮
            delay(2000);              //延时
            P3_5 = 0;                 //蜂鸣器关
            P4 = P4 - 0x10;           //LED灭
            for(j = 0; j < 500; j++) display1();       //延时显示时间
            WDTCN=0xa5;               //喂狗       
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
////                         闹钟提示程序                                 ////
//////////////////////////////////////////////////////////////////////////////
void alarm1()
{
    uchar i;                          //小循环变量
    uint j;                           //延时显示循环变量
    uchar k;                          //大循环变量
    uchar mg;                         //键值局域变量
    WDTCN=0xa5;                       //喂狗
    if (suichi[1] == 1)               //若开关打开
    {                                 //且到闹钟时间
        if((hour == alarm[0][1] && sec == 0 && min == alarm[0][0] && toki == 0) ||
                (hour == alarm[1][1] && sec == 0 && min == alarm[1][0] && toki == 0) ||
                (hour == alarm[2][1] && sec == 0 && min == alarm[2][0] && toki == 0) )
        {
            for(k = 0; k < 30; k++)   //嘀嘀嘀嘀四声，提示三十次
            {
                WDTCN=0xa5;           //喂狗
                for(i = 0; i < 4; i++)
                {
                    WDTCN=0xa5;       //喂狗
                    P3_5 = 1;
                    mg = keyscan();   //键盘扫描
                    if(mg == 12)      //若按=键
                    {
                        P3_5 = 0;     //关闹钟
                        break;
                    }
                    delay(1000);
                    P3_5 = 0;
                    mg = keyscan();   //键盘扫描
                    for(j = 0; j < 150; j++) display1();   //延时显示时间
                }
                if(mg == 12) break;   //若按=键，关闹钟
                for(j = 0; j < 500; j++) display1();       //延时显示时间
                WDTCN=0xa5;           //喂狗
                mg = keyscan();       //键盘扫描
                if(mg == 12) break;   //若按=键，关闹钟
            }
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
////                             主程序                                   ////
//////////////////////////////////////////////////////////////////////////////
void main()
{
    Init_Device() ;                   //晶振、定时器初始化
    WDTCN = 0xff;                     //看门狗设置
    WDTCN = 0x07;
    XBR2 = 0x40;                      //crossbar设置
    P2MDOUT = 0xff;
    P3MDOUT = 0xff;
    P3_5 = 0;                         //关蜂鸣器
    TR0 = 1;                          //开定时器

    while(1) {}                       //等待中断

}


//////////////////////////////////////////////////////////////////////////////
////                         定时器0程序                                  ////
//////////////////////////////////////////////////////////////////////////////
void timer0(void) interrupt 1         //定时器0，中断1
{
    TH0 = 0x4c;                       //加载计数脉冲次数，延时25ms 
    TL0 = 0x00;
    TMOD = 0x01;                      //定时器0设置模式1

    toki++;                           //用于计算时间，每隔25ms加1
    if(toki == 40)                    //toki满40即为一秒
    {
        sec++;                        //秒+1
        time( );                      //时间处理
        toki = 0;                     //重新开始计数
        WDTCN=0xa5;                   //喂狗 
    }
}



//////////////////////////////////////////////////////////////////////////////
////                         定时器3程序                                  ////
//////////////////////////////////////////////////////////////////////////////
void timer3(void) interrupt 14        //定时器3，中断14，用来维护程序
{
    WDTCN=0xa5;                       //喂狗
    m = keyscan();                    //键盘扫描
    select();                         //显示/设置选择函数
    alarm1();                         //闹钟提示
    oclock();                         //整点报时                      
}


